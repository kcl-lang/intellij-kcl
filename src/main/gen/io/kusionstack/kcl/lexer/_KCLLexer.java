/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.kusionstack.kcl.lexer;

import io.kusionstack.kcl.psi.KCLTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>kcl.flex</tt>
 */
class _KCLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15616 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12\1\23"+
    "\1\12\1\24\1\23\1\12\1\25\1\23\1\12\1\26\1\27\1\12\1\30\1\31\1\1\1\30\4\12"+
    "\1\32\6\12\1\33\1\34\1\35\1\1\3\12\1\36\6\12\1\15\1\37\2\12\1\40\2\12\1\41"+
    "\1\1\1\12\1\42\4\1\1\12\1\43\1\1\1\44\1\21\7\12\1\45\1\23\1\33\1\46\1\34\1"+
    "\47\1\50\1\51\1\45\1\15\1\52\1\46\1\34\1\53\1\54\1\55\1\56\1\57\1\60\1\21"+
    "\1\34\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\34\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\56\1\1\1\77\1\100\1\34\1\101\1\102\1\103\1\45"+
    "\1\1\1\77\1\100\1\34\1\104\1\102\1\105\1\45\1\106\1\107\1\100\1\12\1\36\1"+
    "\110\1\111\1\45\1\112\1\113\1\114\1\12\1\115\1\116\1\117\1\56\1\120\1\23\2"+
    "\12\1\30\1\121\1\122\2\1\1\123\1\124\1\125\1\126\1\127\1\130\2\1\1\63\1\131"+
    "\1\122\1\132\1\133\1\12\1\134\1\23\1\135\1\133\1\12\1\134\1\136\3\1\4\12\1"+
    "\122\4\12\1\137\2\12\1\140\2\12\1\141\24\12\1\142\1\143\2\12\1\142\2\12\1"+
    "\144\1\145\1\13\3\12\1\145\3\12\1\36\2\1\1\12\1\1\5\12\1\146\1\23\45\12\1"+
    "\147\1\12\1\23\1\30\4\12\1\150\1\151\1\152\1\153\1\12\1\153\1\12\1\154\1\152"+
    "\1\155\5\12\1\156\1\122\1\1\1\157\1\122\5\12\1\25\2\12\1\30\4\12\1\57\1\12"+
    "\1\121\2\42\1\56\1\12\1\41\1\153\2\12\1\42\1\12\1\160\1\122\2\1\1\12\1\42"+
    "\3\12\1\121\1\12\1\147\2\122\1\161\1\121\4\1\4\12\1\42\1\122\1\162\1\154\3"+
    "\12\1\37\3\12\1\154\3\12\1\25\1\163\1\37\1\12\1\41\1\151\4\1\1\164\1\12\1"+
    "\165\17\12\1\166\21\12\1\146\2\12\1\146\1\167\1\12\1\41\3\12\1\170\1\171\1"+
    "\172\1\134\1\171\3\1\1\173\1\63\1\174\1\1\1\175\1\1\1\134\3\1\2\12\1\63\1"+
    "\176\1\177\1\200\1\201\1\202\1\1\2\12\1\151\62\1\1\203\2\12\1\160\161\1\2"+
    "\12\1\121\2\12\1\121\10\12\1\204\1\154\2\12\1\140\3\12\1\205\1\173\1\12\1"+
    "\206\4\207\2\12\2\1\1\173\35\1\1\210\1\1\1\23\1\211\1\23\4\12\1\212\1\23\4"+
    "\12\1\141\1\213\1\12\1\41\1\23\4\12\1\121\1\1\1\12\1\30\3\1\1\12\40\1\133"+
    "\12\1\57\4\1\135\12\1\57\2\1\10\12\1\134\4\1\2\12\1\41\20\12\1\134\1\12\1"+
    "\214\1\1\3\12\1\215\7\12\1\15\1\1\1\216\1\217\5\12\1\220\1\12\1\121\1\25\3"+
    "\1\1\216\2\12\1\25\1\1\3\12\1\154\4\12\1\57\1\122\1\12\1\221\1\37\1\12\1\41"+
    "\2\12\1\154\1\12\1\134\4\12\1\222\1\122\1\12\1\223\3\12\1\206\1\41\1\122\1"+
    "\12\1\114\4\12\1\31\1\157\1\12\1\224\1\225\1\226\1\207\2\12\1\141\1\57\7\12"+
    "\1\227\1\122\72\12\1\154\1\12\1\230\2\12\1\42\20\1\26\12\1\41\6\12\1\160\2"+
    "\1\1\206\1\231\1\34\1\232\1\233\6\12\1\15\1\1\1\234\25\12\1\41\1\1\4\12\1"+
    "\217\2\12\1\25\2\1\1\42\1\12\1\1\1\12\1\235\1\236\2\1\1\135\7\12\1\134\1\1"+
    "\1\122\1\23\1\237\1\23\1\30\1\203\4\12\1\121\1\240\1\241\2\1\1\242\1\12\1"+
    "\13\1\243\2\41\2\1\7\12\1\30\4\1\3\12\1\153\7\1\1\244\10\1\1\12\1\134\3\12"+
    "\2\63\1\1\2\12\1\1\1\12\1\30\2\12\1\30\1\12\1\41\2\12\1\245\1\246\2\1\11\12"+
    "\1\41\1\122\2\12\1\245\1\12\1\42\2\12\1\25\3\12\1\154\11\1\23\12\1\206\1\12"+
    "\1\57\1\25\11\1\1\247\2\12\1\250\1\12\1\57\1\12\1\206\1\12\1\121\4\1\1\12"+
    "\1\251\1\12\1\57\1\12\1\160\4\1\3\12\1\252\4\1\1\253\1\254\1\12\1\255\2\1"+
    "\1\12\1\134\1\12\1\134\2\1\1\133\1\12\1\206\1\1\3\12\1\57\1\12\1\57\1\12\1"+
    "\31\1\12\1\15\6\1\4\12\1\151\3\1\3\12\1\31\3\12\1\31\60\1\4\12\1\206\1\1\1"+
    "\56\1\173\3\12\1\30\1\1\1\12\1\151\1\122\3\12\1\256\1\1\2\12\1\257\4\12\1"+
    "\260\1\261\2\1\1\12\1\21\1\12\1\262\4\1\1\263\1\26\1\151\3\12\1\30\1\122\1"+
    "\33\1\46\1\34\1\61\1\66\1\264\1\265\1\153\10\1\4\12\1\30\1\122\2\1\4\12\1"+
    "\266\1\122\12\1\3\12\1\267\1\63\1\270\2\1\4\12\1\271\1\122\2\1\3\12\1\25\1"+
    "\122\3\1\1\12\1\101\1\42\1\122\26\1\4\12\1\122\1\173\34\1\3\12\1\151\20\1"+
    "\1\34\2\12\1\13\1\63\1\122\1\1\1\217\1\12\1\217\1\133\1\206\64\1\71\12\1\160"+
    "\6\1\6\12\1\121\1\1\14\12\1\154\53\1\2\12\1\121\75\1\44\12\1\206\33\1\43\12"+
    "\1\151\1\12\1\121\1\122\6\1\1\12\1\41\1\153\3\12\1\206\1\154\1\122\1\234\1"+
    "\272\1\12\67\1\4\12\1\153\2\12\1\121\1\173\1\12\4\1\1\63\1\1\76\12\1\134\1"+
    "\1\57\12\1\31\20\1\1\15\77\1\6\12\1\30\1\134\1\151\1\273\114\1\1\274\1\275"+
    "\1\276\1\1\1\277\11\1\1\300\33\1\5\12\1\135\3\12\1\152\1\301\1\302\1\303\3"+
    "\12\1\304\1\305\1\12\1\306\1\307\1\100\24\12\1\267\1\12\1\100\1\141\1\12\1"+
    "\141\1\12\1\135\1\12\1\135\1\121\1\12\1\121\1\12\1\34\1\12\1\34\1\12\1\310"+
    "\3\311\40\1\3\12\1\230\2\12\1\134\1\312\1\174\1\162\1\23\25\1\1\13\1\220\1"+
    "\313\75\1\14\12\1\153\1\206\2\1\4\12\1\30\1\122\112\1\1\303\1\12\1\314\1\315"+
    "\1\316\1\317\1\320\1\321\1\322\1\42\1\323\1\42\47\1\1\12\1\160\1\12\1\160"+
    "\1\12\1\160\47\1\55\12\1\206\2\1\103\12\1\153\15\12\1\41\150\12\1\15\25\1"+
    "\41\12\1\41\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3392 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\7\1\5\1\0\1\11\1\6\22\0\1\7\1\56\1\32\1\4\1\1\1\50\1\51\1\31\1\40"+
    "\1\41\1\46\1\24\1\35\1\12\1\25\1\47\1\13\1\23\6\21\2\14\1\34\1\0\1\55\1\33"+
    "\1\37\1\36\1\57\1\17\1\22\1\30\1\17\1\26\1\105\1\112\3\2\1\110\1\2\1\111\1"+
    "\106\1\20\1\113\1\2\1\27\1\2\1\103\1\107\2\2\1\16\2\2\1\42\1\10\1\43\1\53"+
    "\1\2\1\0\1\66\1\101\1\70\1\76\1\72\1\100\1\2\1\71\1\60\1\2\1\77\1\75\1\61"+
    "\1\74\1\63\1\62\1\2\1\64\1\67\1\65\1\104\2\2\1\73\1\102\1\2\1\44\1\52\1\45"+
    "\1\54\13\0\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0\12\3\4\0\14\3\16\0\5\3\7\0\1"+
    "\3\1\0\1\3\1\0\5\3\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3"+
    "\1\0\23\3\1\0\11\3\1\0\26\3\2\0\1\3\6\0\10\3\10\0\16\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\10\0\13\3\5\0\3\3\15\0\12\15\4\0\6\3\1\0\10\3\2\0\12\3\1\0\6"+
    "\3\12\15\3\3\2\0\14\3\2\0\3\3\12\15\14\3\4\0\1\3\5\0\16\3\2\0\14\3\4\0\5\3"+
    "\1\0\10\3\6\0\20\3\2\0\12\15\1\3\2\0\16\3\1\0\1\3\3\0\4\3\2\0\11\3\2\0\2\3"+
    "\2\0\4\3\10\0\1\3\4\0\2\3\1\0\1\3\1\0\3\3\1\0\6\3\4\0\2\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3\7\0\4\3\1\0\1\3\7\0\12\15"+
    "\6\3\13\0\3\3\1\0\11\3\1\0\2\3\1\0\2\3\1\0\5\3\2\0\12\3\1\0\3\3\1\0\3\3\2"+
    "\0\1\3\30\0\1\3\7\0\3\3\1\0\10\3\2\0\6\3\2\0\2\3\2\0\3\3\10\0\2\3\4\0\2\3"+
    "\1\0\1\3\1\0\1\3\20\0\2\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3"+
    "\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\3\3\0\3\3\1\0\4\3\2\0\1\3\6\0\1\3\10\0\4\3"+
    "\1\0\10\3\1\0\3\3\1\0\30\3\3\0\10\3\1\0\3\3\1\0\4\3\7\0\2\3\1\0\3\3\5\0\4"+
    "\3\1\0\5\3\2\0\4\3\5\0\2\3\7\0\1\3\2\0\2\3\16\0\3\3\1\0\10\3\1\0\7\3\1\0\3"+
    "\3\1\0\5\3\5\0\4\3\7\0\1\3\12\0\6\3\2\0\2\3\1\0\22\3\3\0\10\3\1\0\11\3\1\0"+
    "\1\3\2\0\7\3\3\0\1\3\4\0\6\3\1\0\1\3\1\0\10\3\2\0\2\3\14\0\17\3\1\0\12\15"+
    "\7\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1"+
    "\0\1\3\2\0\2\3\1\0\15\3\1\0\3\3\2\0\5\3\1\0\1\3\1\0\6\3\2\0\12\15\2\0\4\3"+
    "\10\0\2\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0\12\3\1\0\24\3\3\0\5\3\1\0\12\3\6\0"+
    "\1\3\11\0\12\15\4\3\2\0\6\3\1\0\1\3\5\0\1\3\2\0\13\3\1\0\15\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\16\3\2\0"+
    "\6\3\2\0\15\3\2\0\14\3\3\0\13\3\7\0\15\3\1\0\7\3\13\0\4\3\14\0\1\3\1\0\2\3"+
    "\14\0\4\3\3\0\1\3\4\0\2\3\15\0\3\3\2\0\12\3\15\0\1\3\23\0\5\3\12\15\3\0\6"+
    "\3\1\0\23\3\1\0\2\3\6\0\6\3\5\0\15\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\6\3\1\0\7"+
    "\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\23\0\1\3\4\0\1\3\14\0\1\3\15\0"+
    "\1\3\2\0\1\3\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\1\0\13\3\2\0\4\3\5\0\5\3\4\0\1\3\7\0\17\3\6\0\15\3\7\0\10\3\11\0\7\3"+
    "\1\0\7\3\6\0\3\3\11\0\5\3\2\0\5\3\3\0\7\3\2\0\2\3\2\0\3\3\5\0\13\3\12\15\2"+
    "\3\4\0\3\3\1\0\12\3\1\0\1\3\7\0\11\3\2\0\27\3\2\0\15\3\3\0\1\3\1\0\1\3\2\0"+
    "\1\3\16\0\1\3\12\15\5\3\3\0\5\3\12\0\6\3\2\0\6\3\2\0\6\3\11\0\13\3\1\0\2\3"+
    "\2\0\7\3\4\0\5\3\3\0\5\3\5\0\12\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\3\0\15\3\3\0\2\3\30\0\16\3\4\0\1\3\2\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\14"+
    "\3\1\0\16\3\1\0\2\3\1\0\1\3\15\0\1\3\2\0\4\3\4\0\10\3\1\0\5\3\12\0\6\3\2\0"+
    "\1\3\1\0\14\3\1\0\2\3\3\0\1\3\2\0\4\3\1\0\2\3\12\0\10\3\6\0\6\3\1\0\2\3\5"+
    "\0\10\3\1\0\3\3\1\0\13\3\4\0\3\3\4\0\6\3\1\0\12\15\4\3\2\0\1\3\11\0\5\3\5"+
    "\0\3\3\3\0\12\15\1\3\1\0\1\3\3\0\10\3\6\0\1\3\1\0\7\3\1\0\1\3\1\0\4\3\1\0"+
    "\2\3\6\0\1\3\5\0\7\3\2\0\7\3\3\0\6\3\1\0\1\3\10\0\6\3\2\0\10\3\10\0\6\3\2"+
    "\0\1\3\3\0\1\3\13\0\10\3\5\0\15\3\3\0\2\3\6\0\5\3\3\0\6\3\10\0\10\3\2\0\7"+
    "\3\16\0\4\3\4\0\3\3\15\0\1\3\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3\1\0"+
    "\21\3\1\0\4\3\2\0\10\3\1\0\7\3\1\0\14\3\1\0\4\3\1\0\5\3\1\0\1\3\3\0\11\3\1"+
    "\0\10\3\2\0\22\15\5\0\1\3\12\0\2\3\1\0\2\3\1\0\5\3\6\0\2\3\1\0\1\3\2\0\1\3"+
    "\1\0\12\3\1\0\4\3\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\3\1\0\1\3\2"+
    "\0\4\3\1\0\7\3\1\0\4\3\1\0\4\3\1\0\1\3\1\0\12\3\1\0\5\3\1\0\3\3\1\0\5\3\1"+
    "\0\5\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\2\7\1\1\1\2\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\1\1\36\1\2\1\37\10\2\1\40"+
    "\1\2\1\41\2\2\1\42\1\43\3\2\1\44\1\45"+
    "\1\46\1\47\1\4\1\0\1\50\2\0\2\7\1\0"+
    "\1\51\1\52\1\53\4\0\1\54\1\0\1\2\1\55"+
    "\6\12\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\2"+
    "\1\74\1\75\1\76\3\2\1\77\2\2\1\100\14\2"+
    "\1\101\4\2\1\102\1\103\1\104\1\105\1\53\1\106"+
    "\1\53\1\107\1\0\1\54\1\2\1\12\2\110\1\111"+
    "\1\112\1\113\1\114\1\2\1\115\1\2\1\116\4\2"+
    "\1\117\1\120\1\121\1\122\4\2\1\123\3\2\1\124"+
    "\6\2\4\0\4\2\1\125\3\2\1\126\1\127\4\2"+
    "\1\130\1\131\1\2\1\132\1\2\2\0\1\2\1\133"+
    "\4\2\1\134\1\2\1\135\1\2\1\136\1\137\1\2"+
    "\1\110\1\140\2\2\1\141\1\142\1\143\1\144\2\2"+
    "\1\145\1\2\1\146\1\2\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\114"+
    "\0\u0214\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\114\0\114\0\114\0\u0558\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\u05a4\0\u05f0\0\u063c"+
    "\0\u0688\0\u06d4\0\u0720\0\114\0\u076c\0\u07b8\0\114\0\u0804"+
    "\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64"+
    "\0\u0ab0\0\u0afc\0\u0b48\0\344\0\u0b94\0\u0be0\0\u0c2c\0\u0390"+
    "\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c"+
    "\0\u01c8\0\114\0\u0ed8\0\u0214\0\u0f24\0\u0f70\0\u0fbc\0\114"+
    "\0\114\0\u1008\0\u0344\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184"+
    "\0\u11d0\0\114\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398"+
    "\0\114\0\114\0\u13e4\0\114\0\u1430\0\114\0\u147c\0\114"+
    "\0\114\0\114\0\114\0\114\0\u14c8\0\114\0\u1514\0\344"+
    "\0\u1560\0\344\0\u15ac\0\u15f8\0\u1644\0\344\0\u1690\0\u16dc"+
    "\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c"+
    "\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\344\0\u1b04\0\u1b50"+
    "\0\u1b9c\0\u1be8\0\344\0\344\0\344\0\344\0\u1c34\0\u1054"+
    "\0\u10a0\0\u10ec\0\u1c80\0\u1c80\0\u1ccc\0\114\0\u1d18\0\u1d64"+
    "\0\114\0\114\0\114\0\114\0\u1db0\0\344\0\u1dfc\0\344"+
    "\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\344\0\344\0\344\0\344"+
    "\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\344\0\u20a8\0\u20f4\0\u2140"+
    "\0\344\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354"+
    "\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\344"+
    "\0\u25b4\0\u2600\0\u264c\0\344\0\344\0\u2698\0\u26e4\0\u2730"+
    "\0\u277c\0\344\0\344\0\u27c8\0\344\0\u2814\0\u2860\0\u28ac"+
    "\0\u28f8\0\344\0\u2944\0\u2990\0\u29dc\0\u2a28\0\344\0\u2a74"+
    "\0\344\0\u2ac0\0\344\0\344\0\u2b0c\0\114\0\344\0\u2b58"+
    "\0\u2ba4\0\344\0\344\0\344\0\344\0\u2bf0\0\u2c3c\0\344"+
    "\0\u2c88\0\344\0\u2cd4\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\3\4\1\14"+
    "\1\16\1\14\1\17\1\20\1\4\2\16\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\4\1\61"+
    "\1\4\1\62\1\63\1\4\1\64\1\65\1\66\1\4"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\116\0\1\4\13\0\3\4\1\0\1\4\3\0"+
    "\3\4\27\0\34\4\2\0\2\4\7\0\11\4\2\0"+
    "\3\4\27\0\34\4\5\5\1\6\106\5\4\0\1\100"+
    "\1\6\1\101\1\6\111\0\1\6\113\0\1\102\1\103"+
    "\1\104\1\0\1\104\115\0\1\105\1\106\1\107\3\0"+
    "\1\106\1\0\1\106\7\0\1\110\3\0\1\111\67\0"+
    "\1\112\2\113\1\114\1\0\1\115\1\112\1\116\1\112"+
    "\1\0\1\117\1\120\34\0\1\115\6\0\1\120\1\114"+
    "\5\0\1\116\25\0\3\14\3\0\1\14\1\0\1\14"+
    "\1\0\1\117\1\120\43\0\1\120\34\0\3\113\3\0"+
    "\1\113\1\0\1\113\1\0\1\117\1\120\43\0\1\120"+
    "\23\0\2\4\7\0\7\4\1\121\1\4\2\0\1\4"+
    "\2\121\1\21\1\22\25\0\4\4\1\121\3\4\1\121"+
    "\10\4\1\121\2\4\1\121\2\4\1\121\4\4\13\0"+
    "\3\107\3\0\1\107\1\0\1\107\7\0\1\122\73\0"+
    "\3\117\3\0\1\117\1\0\1\117\70\0\5\123\2\0"+
    "\1\123\1\124\20\123\1\125\62\123\5\126\2\0\1\126"+
    "\1\127\21\126\1\130\61\126\33\0\1\131\113\0\1\132"+
    "\3\0\1\133\107\0\1\134\12\0\1\135\100\0\1\136"+
    "\13\0\1\137\77\0\1\140\113\0\1\141\113\0\1\142"+
    "\113\0\1\143\113\0\1\144\21\0\1\145\71\0\1\146"+
    "\62\0\2\4\7\0\11\4\2\0\3\4\27\0\1\4"+
    "\1\147\5\4\1\150\4\4\1\151\3\4\1\152\13\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\1\153"+
    "\5\4\1\154\25\4\2\0\2\4\7\0\11\4\2\0"+
    "\3\4\27\0\4\4\1\155\27\4\2\0\2\4\7\0"+
    "\11\4\2\0\3\4\27\0\4\4\1\156\27\4\2\0"+
    "\2\4\7\0\7\4\1\121\1\4\2\0\1\4\2\121"+
    "\1\21\1\22\25\0\4\4\1\121\3\4\1\121\1\4"+
    "\1\157\6\4\1\121\2\4\1\121\2\4\1\121\4\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\22\4"+
    "\1\160\11\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\7\4\1\161\4\4\1\162\1\163\16\4\2\0"+
    "\2\4\7\0\11\4\2\0\3\4\27\0\5\4\1\164"+
    "\2\4\1\165\23\4\2\0\2\4\7\0\7\4\1\121"+
    "\1\4\2\0\1\4\2\121\1\21\1\22\25\0\4\4"+
    "\1\121\3\4\1\121\1\166\7\4\1\121\2\4\1\121"+
    "\2\4\1\121\4\4\2\0\2\4\7\0\11\4\2\0"+
    "\3\4\27\0\15\4\1\167\16\4\2\0\2\4\7\0"+
    "\11\4\2\0\3\4\27\0\3\4\1\170\30\4\2\0"+
    "\2\4\7\0\11\4\2\0\3\4\27\0\6\4\1\171"+
    "\25\4\2\0\2\4\7\0\11\4\2\0\3\4\27\0"+
    "\1\172\2\4\1\173\11\4\1\174\16\4\2\0\2\4"+
    "\7\0\7\4\1\121\1\4\2\0\1\4\2\121\1\21"+
    "\1\22\25\0\3\4\1\175\1\121\3\4\1\121\10\4"+
    "\1\121\2\4\1\121\2\4\1\121\4\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\1\176\3\4\1\177"+
    "\27\4\2\0\2\4\7\0\11\4\2\0\3\4\27\0"+
    "\6\4\1\200\25\4\2\0\2\4\7\0\11\4\2\0"+
    "\3\4\27\0\3\4\1\201\30\4\2\0\2\4\7\0"+
    "\7\4\1\121\1\4\2\0\1\4\2\121\1\21\1\22"+
    "\25\0\4\4\1\121\3\4\1\121\3\4\1\202\4\4"+
    "\1\121\2\4\1\121\2\4\1\121\4\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\1\203\33\4\2\0"+
    "\2\4\7\0\11\4\2\0\3\4\27\0\1\204\33\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\1\205"+
    "\33\4\2\0\2\4\7\0\11\4\2\0\3\4\27\0"+
    "\1\206\33\4\5\100\1\6\106\100\5\0\1\102\121\0"+
    "\1\207\2\107\1\114\1\0\1\115\1\207\1\116\1\207"+
    "\1\0\1\117\35\0\1\115\7\0\1\114\5\0\1\116"+
    "\25\0\3\106\3\0\1\106\1\0\1\106\1\0\1\117"+
    "\101\0\3\107\3\0\1\107\1\0\1\107\1\0\1\117"+
    "\101\0\1\112\2\113\3\0\1\112\1\0\1\112\1\0"+
    "\1\117\1\120\43\0\1\120\34\0\2\210\2\0\1\210"+
    "\1\0\3\210\2\0\1\210\1\0\1\210\35\0\1\210"+
    "\1\0\1\210\1\0\1\210\3\0\1\210\1\0\2\210"+
    "\3\0\1\210\21\0\1\211\5\0\1\211\1\0\1\211"+
    "\103\0\1\212\7\0\1\212\103\0\3\117\3\0\1\117"+
    "\1\0\1\117\2\0\1\120\43\0\1\120\33\0\1\213"+
    "\3\214\3\0\1\214\1\0\1\214\1\213\71\0\2\4"+
    "\7\0\7\4\1\215\1\4\2\0\1\4\2\215\1\21"+
    "\1\22\25\0\4\4\1\215\3\4\1\215\10\4\1\215"+
    "\2\4\1\215\2\4\1\215\4\4\5\123\2\0\1\123"+
    "\1\124\20\123\1\216\176\123\31\0\1\217\62\0\5\126"+
    "\2\0\1\126\1\127\21\126\1\216\175\126\32\0\1\220"+
    "\114\0\1\221\113\0\1\222\113\0\1\223\113\0\1\224"+
    "\62\0\2\4\7\0\11\4\2\0\3\4\27\0\2\4"+
    "\1\225\31\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\5\4\1\226\26\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\13\4\1\227\20\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\2\4\1\230\31\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\3\4"+
    "\1\231\30\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\15\4\1\232\16\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\2\4\1\233\31\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\7\4\1\234\24\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\16\4"+
    "\1\235\3\4\1\236\11\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\15\4\1\237\16\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\4\4\1\240\27\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\11\4"+
    "\1\241\22\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\12\4\1\242\21\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\1\243\6\4\1\244\24\4\2\0"+
    "\2\4\7\0\11\4\2\0\3\4\27\0\5\4\1\245"+
    "\26\4\2\0\2\4\7\0\11\4\2\0\3\4\27\0"+
    "\1\4\1\246\32\4\2\0\2\4\7\0\11\4\2\0"+
    "\3\4\27\0\14\4\1\247\1\250\16\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\4\4\1\251\27\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\3\4"+
    "\1\252\30\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\3\4\1\253\30\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\24\4\1\254\7\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\15\4\1\255\16\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\14\4"+
    "\1\256\17\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\16\4\1\257\15\4\13\0\1\207\2\107\3\0"+
    "\1\207\1\0\1\207\1\0\1\117\101\0\3\214\3\0"+
    "\1\214\1\0\1\214\72\0\2\4\7\0\11\4\2\0"+
    "\3\4\1\21\1\22\25\0\34\4\10\217\1\260\20\217"+
    "\1\261\62\217\10\220\1\262\21\220\1\263\61\220\2\0"+
    "\2\4\7\0\11\4\2\0\3\4\27\0\3\4\1\264"+
    "\30\4\2\0\2\4\7\0\11\4\2\0\3\4\27\0"+
    "\1\265\33\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\5\4\1\266\26\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\6\4\1\267\25\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\12\4\1\270\21\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\12\4"+
    "\1\271\21\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\12\4\1\272\21\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\10\4\1\273\23\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\20\4\1\274\13\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\12\4"+
    "\1\275\21\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\21\4\1\276\12\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\6\4\1\277\25\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\5\4\1\300\26\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\6\4"+
    "\1\301\25\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\15\4\1\302\16\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\12\4\1\303\21\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\7\4\1\304\24\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\12\4"+
    "\1\305\21\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\12\4\1\306\21\4\124\217\1\260\20\217\1\307"+
    "\62\217\124\220\1\262\21\220\1\310\61\220\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\4\4\1\311\27\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\14\4"+
    "\1\312\17\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\3\4\1\313\30\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\13\4\1\314\20\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\4\4\1\315\27\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\1\4"+
    "\1\316\32\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\17\4\1\317\14\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\16\4\1\320\15\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\15\4\1\321\16\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\12\4"+
    "\1\322\21\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\5\4\1\323\26\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\12\4\1\324\21\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\20\4\1\325\13\4"+
    "\10\217\1\260\20\217\1\326\62\217\10\220\1\262\21\220"+
    "\1\326\61\220\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\5\4\1\327\26\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\10\4\1\330\23\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\12\4\1\331\21\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\5\4"+
    "\1\332\26\4\2\0\2\4\7\0\11\4\2\0\3\4"+
    "\27\0\6\4\1\333\25\4\2\0\2\4\7\0\11\4"+
    "\2\0\3\4\27\0\6\4\1\334\25\4\2\0\2\4"+
    "\7\0\11\4\2\0\3\4\27\0\4\4\1\335\27\4"+
    "\2\0\2\4\7\0\11\4\2\0\3\4\27\0\1\336"+
    "\33\4\2\0\2\4\7\0\11\4\2\0\3\4\27\0"+
    "\3\4\1\337\30\4\2\0\2\4\7\0\11\4\2\0"+
    "\3\4\27\0\16\4\1\340\15\4\2\0\2\4\7\0"+
    "\11\4\2\0\3\4\27\0\14\4\1\341\17\4\2\0"+
    "\2\4\7\0\11\4\2\0\3\4\27\0\15\4\1\342"+
    "\16\4\2\0\2\4\7\0\11\4\2\0\3\4\27\0"+
    "\12\4\1\343\21\4\2\0\2\4\7\0\11\4\2\0"+
    "\3\4\27\0\16\4\1\344\15\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\13\1\3\11\1\1\6\11"+
    "\6\1\1\11\2\1\1\11\31\1\1\0\1\11\2\0"+
    "\2\1\1\0\2\11\1\1\4\0\1\1\1\0\1\1"+
    "\1\11\6\1\2\11\1\1\1\11\1\1\1\11\1\1"+
    "\5\11\1\1\1\11\44\1\1\0\2\1\1\11\2\1"+
    "\4\11\33\1\4\0\23\1\2\0\15\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _KCLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 104: break;
          case 2: 
            { return KCLTypes.NAME;
            } 
            // fall through
          case 105: break;
          case 3: 
            { return KCLTypes.COMMENT;
            } 
            // fall through
          case 106: break;
          case 4: 
            { return KCLTypes.NEWLINE;
            } 
            // fall through
          case 107: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 108: break;
          case 6: 
            { return KCLTypes.MINUS;
            } 
            // fall through
          case 109: break;
          case 7: 
            { return KCLTypes.DEC_NUMBER;
            } 
            // fall through
          case 110: break;
          case 8: 
            { return KCLTypes.PLUS;
            } 
            // fall through
          case 111: break;
          case 9: 
            { return KCLTypes.DOT;
            } 
            // fall through
          case 112: break;
          case 10: 
            { return KCLTypes.STRING;
            } 
            // fall through
          case 113: break;
          case 11: 
            { return KCLTypes.ASSIGN;
            } 
            // fall through
          case 114: break;
          case 12: 
            { return KCLTypes.COLON;
            } 
            // fall through
          case 115: break;
          case 13: 
            { return KCLTypes.COMMA;
            } 
            // fall through
          case 116: break;
          case 14: 
            { return KCLTypes.QUESTION;
            } 
            // fall through
          case 117: break;
          case 15: 
            { return KCLTypes.GREATER_THAN;
            } 
            // fall through
          case 118: break;
          case 16: 
            { return KCLTypes.LEFT_PARENTHESES;
            } 
            // fall through
          case 119: break;
          case 17: 
            { return KCLTypes.RIGHT_PARENTHESES;
            } 
            // fall through
          case 120: break;
          case 18: 
            { return KCLTypes.LEFT_BRACKETS;
            } 
            // fall through
          case 121: break;
          case 19: 
            { return KCLTypes.RIGHT_BRACKETS;
            } 
            // fall through
          case 122: break;
          case 20: 
            { return KCLTypes.LEFT_BRACE;
            } 
            // fall through
          case 123: break;
          case 21: 
            { return KCLTypes.RIGHT_BRACE;
            } 
            // fall through
          case 124: break;
          case 22: 
            { return KCLTypes.MULTIPLY;
            } 
            // fall through
          case 125: break;
          case 23: 
            { return KCLTypes.DIVIDE;
            } 
            // fall through
          case 126: break;
          case 24: 
            { return KCLTypes.MOD;
            } 
            // fall through
          case 127: break;
          case 25: 
            { return KCLTypes.AND;
            } 
            // fall through
          case 128: break;
          case 26: 
            { return KCLTypes.OR;
            } 
            // fall through
          case 129: break;
          case 27: 
            { return KCLTypes.XOR;
            } 
            // fall through
          case 130: break;
          case 28: 
            { return KCLTypes.NOT;
            } 
            // fall through
          case 131: break;
          case 29: 
            { return KCLTypes.LESS_THAN;
            } 
            // fall through
          case 132: break;
          case 30: 
            { return KCLTypes.AT;
            } 
            // fall through
          case 133: break;
          case 31: 
            { return KCLTypes.SI_M_L;
            } 
            // fall through
          case 134: break;
          case 32: 
            { return KCLTypes.SI_N_L;
            } 
            // fall through
          case 135: break;
          case 33: 
            { return KCLTypes.SI_K_L;
            } 
            // fall through
          case 136: break;
          case 34: 
            { return KCLTypes.SI_T;
            } 
            // fall through
          case 137: break;
          case 35: 
            { return KCLTypes.SI_U_L;
            } 
            // fall through
          case 138: break;
          case 36: 
            { return KCLTypes.SI_K;
            } 
            // fall through
          case 139: break;
          case 37: 
            { return KCLTypes.SI_M;
            } 
            // fall through
          case 140: break;
          case 38: 
            { return KCLTypes.SI_G;
            } 
            // fall through
          case 141: break;
          case 39: 
            { return KCLTypes.SI_P;
            } 
            // fall through
          case 142: break;
          case 40: 
            { /* ignore */
            } 
            // fall through
          case 143: break;
          case 41: 
            { return KCLTypes.COMP_MINUS;
            } 
            // fall through
          case 144: break;
          case 42: 
            { return KCLTypes.RIGHT_ARROW;
            } 
            // fall through
          case 145: break;
          case 43: 
            { return KCLTypes.OCT_NUMBER;
            } 
            // fall through
          case 146: break;
          case 44: 
            { return KCLTypes.FLOAT_NUMBER;
            } 
            // fall through
          case 147: break;
          case 45: 
            { return KCLTypes.COMP_PLUS;
            } 
            // fall through
          case 148: break;
          case 46: 
            { return KCLTypes.EQUAL_TO;
            } 
            // fall through
          case 149: break;
          case 47: 
            { return KCLTypes.GREATER_THAN_OR_EQUAL_TO;
            } 
            // fall through
          case 150: break;
          case 48: 
            { return KCLTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 151: break;
          case 49: 
            { return KCLTypes.COMP_MULTIPLY;
            } 
            // fall through
          case 152: break;
          case 50: 
            { return KCLTypes.DOUBLE_STAR;
            } 
            // fall through
          case 153: break;
          case 51: 
            { return KCLTypes.COMP_DIVIDE;
            } 
            // fall through
          case 154: break;
          case 52: 
            { return KCLTypes.DOUBLE_DIVIDE;
            } 
            // fall through
          case 155: break;
          case 53: 
            { return KCLTypes.COMP_MOD;
            } 
            // fall through
          case 156: break;
          case 54: 
            { return KCLTypes.COMP_AND;
            } 
            // fall through
          case 157: break;
          case 55: 
            { return KCLTypes.COMP_OR;
            } 
            // fall through
          case 158: break;
          case 56: 
            { return KCLTypes.COMP_XOR;
            } 
            // fall through
          case 159: break;
          case 57: 
            { return KCLTypes.LESS_THAN_OR_EQUAL_TO;
            } 
            // fall through
          case 160: break;
          case 58: 
            { return KCLTypes.SHIFT_LEFT;
            } 
            // fall through
          case 161: break;
          case 59: 
            { return KCLTypes.NOT_EQUAL_TO;
            } 
            // fall through
          case 162: break;
          case 60: 
            { return KCLTypes.IS;
            } 
            // fall through
          case 163: break;
          case 61: 
            { return KCLTypes.IN;
            } 
            // fall through
          case 164: break;
          case 62: 
            { return KCLTypes.IF;
            } 
            // fall through
          case 165: break;
          case 63: 
            { return KCLTypes.K_OR;
            } 
            // fall through
          case 166: break;
          case 64: 
            { return KCLTypes.AS;
            } 
            // fall through
          case 167: break;
          case 65: 
            { return KCLTypes.SI_T_IEC;
            } 
            // fall through
          case 168: break;
          case 66: 
            { return KCLTypes.SI_K_IEC;
            } 
            // fall through
          case 169: break;
          case 67: 
            { return KCLTypes.SI_M_IEC;
            } 
            // fall through
          case 170: break;
          case 68: 
            { return KCLTypes.SI_G_IEC;
            } 
            // fall through
          case 171: break;
          case 69: 
            { return KCLTypes.SI_P_IEC;
            } 
            // fall through
          case 172: break;
          case 70: 
            { return KCLTypes.HEX_NUMBER;
            } 
            // fall through
          case 173: break;
          case 71: 
            { return KCLTypes.BIN_NUMBER;
            } 
            // fall through
          case 174: break;
          case 72: 
            { return KCLTypes.LONG_STRING;
            } 
            // fall through
          case 175: break;
          case 73: 
            { return KCLTypes.COMP_SHIFT_RIGHT;
            } 
            // fall through
          case 176: break;
          case 74: 
            { return KCLTypes.COMP_DOUBLE_STAR;
            } 
            // fall through
          case 177: break;
          case 75: 
            { return KCLTypes.COMP_DOUBLE_DIVIDE;
            } 
            // fall through
          case 178: break;
          case 76: 
            { return KCLTypes.COMP_SHIFT_LEFT;
            } 
            // fall through
          case 179: break;
          case 77: 
            { return KCLTypes.INT_TYPE;
            } 
            // fall through
          case 180: break;
          case 78: 
            { return KCLTypes.MAP;
            } 
            // fall through
          case 181: break;
          case 79: 
            { return KCLTypes.K_AND;
            } 
            // fall through
          case 182: break;
          case 80: 
            { return KCLTypes.ANY;
            } 
            // fall through
          case 183: break;
          case 81: 
            { return KCLTypes.ALL;
            } 
            // fall through
          case 184: break;
          case 82: 
            { return KCLTypes.STRING_TYPE;
            } 
            // fall through
          case 185: break;
          case 83: 
            { return KCLTypes.K_NOT;
            } 
            // fall through
          case 186: break;
          case 84: 
            { return KCLTypes.FOR;
            } 
            // fall through
          case 187: break;
          case 85: 
            { return KCLTypes.K_TYPE;
            } 
            // fall through
          case 188: break;
          case 86: 
            { return KCLTypes.ELIF;
            } 
            // fall through
          case 189: break;
          case 87: 
            { return KCLTypes.ELSE;
            } 
            // fall through
          case 190: break;
          case 88: 
            { return KCLTypes.BOOL_TYPE;
            } 
            // fall through
          case 191: break;
          case 89: 
            { return KCLTypes.TRUE;
            } 
            // fall through
          case 192: break;
          case 90: 
            { return KCLTypes.NONE;
            } 
            // fall through
          case 193: break;
          case 91: 
            { return KCLTypes.MIXIN;
            } 
            // fall through
          case 194: break;
          case 92: 
            { return KCLTypes.CHECK;
            } 
            // fall through
          case 195: break;
          case 93: 
            { return KCLTypes.FINAL;
            } 
            // fall through
          case 196: break;
          case 94: 
            { return KCLTypes.FLOAT_TYPE;
            } 
            // fall through
          case 197: break;
          case 95: 
            { return KCLTypes.FALSE;
            } 
            // fall through
          case 198: break;
          case 96: 
            { return KCLTypes.IMPORT;
            } 
            // fall through
          case 199: break;
          case 97: 
            { return KCLTypes.ASSERT;
            } 
            // fall through
          case 200: break;
          case 98: 
            { return KCLTypes.SCHEMA;
            } 
            // fall through
          case 201: break;
          case 99: 
            { return KCLTypes.LAMBDA;
            } 
            // fall through
          case 202: break;
          case 100: 
            { return KCLTypes.FILTER;
            } 
            // fall through
          case 203: break;
          case 101: 
            { return KCLTypes.RELAXED;
            } 
            // fall through
          case 204: break;
          case 102: 
            { return KCLTypes.PROTOCOL;
            } 
            // fall through
          case 205: break;
          case 103: 
            { return KCLTypes.UNDEFINED;
            } 
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
